from aiogram import types
from aiogram.dispatcher import FSMContext, filters
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from fuzzywuzzy import process

from handlers.users.my_profile import db
from handlers.users.users_info import AgeRestriction, NumberCharacters, InsufficientAge
from keyboards.inline.gaming_keyboards import show_gender_keyboard, show_who_search_keyboard, \
    show_correct_profile_keyboard, show_looking_for_keyboard, get_teammates_country
from loader import dp
from utils import photo_link
from utils.db_api import models


# –£–∑–Ω–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state='edit_age', content_types=types.ContentTypes.ANY)
async def edit_profile_age(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')

    try:
        age = int(message.text)
        if age > 99:
            raise AgeRestriction
        elif age < 10:
            raise InsufficientAge

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–µ–∫—Å—Ç
    except ValueError:
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        else:
            await message.answer('Enter an integer')
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Å—Ç–∏–∫–µ—Ä
    except TypeError:
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        else:
            await message.answer('Enter an integer')
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç –±–æ–ª—å—à–µ 99 –ª–µ—Ç
    except AgeRestriction:
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
        else:
            await message.answer('Specify the correct age')
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç –º–µ–Ω—å—à–µ 10 –ª–µ—Ç
    except InsufficientAge:
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('‚õîÔ∏è–í–ê–ú –ó–ê–ü–†–ï–©–ï–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø –î–ê–ù–ù–´–ú –ë–û–¢–û–ú‚õîÔ∏è')
        else:
            await message.answer('‚õîÔ∏èYOU ARE NOT ALLOWED TO USE THIS BOT‚õîÔ∏è')
        return

    await state.update_data(age=age)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—å—à–µ 16 –ª–µ—Ç
    if age < 16:
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –ø—Ä–æ—Å—Ç–æ —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ, —á—Ç–æ –≤ —ç—Ç–æ–º –º–∏—Ä–µ –Ω–µ –≤—Å–µ —Ç–∞–∫ —Ä–∞–¥—É–∂–Ω–æ –∏ –±–µ–∑–∑–∞–±–æ—Ç–Ω–æ, '
                                 '–ø–æ–ª–Ω–æ –∑–ª—ã—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç —Å–µ–±—è –Ω–µ –∑–∞ —Ç–µ—Ö, –∫–µ–º —è–≤–ª—è—é—Ç—Å—è - –Ω–∏–∫–æ–º—É –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ '
                                 '—Å–∫–∏–¥—ã–≤–∞–π —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–≥–ª–∞—à–∞–π—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏ –≤–µ—á–µ—Ä–æ–º –∏–ª–∏ –Ω–µ –≤ –ª—é–¥–Ω—ã—Ö '
                                 '–º–µ—Å—Ç–∞—Ö, –∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–π –≤—Å–µ—Ö) –Ø –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∂–∏–≤–∞—é –æ —Ç–µ–±–µ –∏ –±–µ—Ä–µ–≥–∏ —Å–µ–±—è!')
        else:
            await message.answer("Hi, I just want to tell you that in this world, not everything is so rosy and "
                                 "carefree, full of evil people who pretend not to be who they are - never throw off "
                                 "your photos to anyone, never agree to meetings in the evening or not in crowded "
                                 "places, and suspect everyone) I'm just worried about you and take care of yourself!")

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer('–¢—ã –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞?', reply_markup=show_gender_keyboard(language))
    else:
        await message.answer('Are you a guy or a girl?', reply_markup=show_gender_keyboard(language))

    await state.set_state('edit_gender')


# –£–∑–Ω–∞–µ–º —Ü–µ–ª—å –ø–æ–∏—Å–∫–∞
@dp.message_handler(state='edit_gender')
async def set_continue(message: types.Message, state: FSMContext):
    gender = message.text
    await state.update_data(gender=gender)
    data = await state.get_data()
    language = data.get('language')
    age = data.get('age')
    text_ru = '–ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å?'
    text_en = 'Who are you looking for?'

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer(text=text_ru, reply_markup=show_looking_for_keyboard(language, age))
    else:
        await message.answer(text=text_en, reply_markup=show_looking_for_keyboard(language, age))

    await state.set_state('edit_looking_for')


# –£–∑–Ω–∞–µ–º, –∫–æ–≥–æ –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@dp.message_handler(state='edit_looking_for')
async def edit_profile_gender(message: types.Message, state: FSMContext):
    purpose = message.text
    await state.update_data(purpose=purpose)
    data = await state.get_data()
    language = data.get('language')
    age = data.get('age')

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ü—Ä–æ—Å—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å"
    if purpose in ['–ü—Ä–æ—Å—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å', 'Just to play']:

        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–ò–∑ –∫–∞–∫–∏—Ö —Å—Ç—Ä–∞–Ω –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ –±—ã –±—ã–ª–∏ –≤–∞—à–∏ —Ç–∏–º–º–µ–π—Ç—ã?',
                                 reply_markup=get_teammates_country(language))

        else:
            await message.answer('What countries do you want your teammates to be from?',
                                 reply_markup=get_teammates_country(language))

        await state.set_state('edit_profile_just_play')

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ö–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∞–∫–æ–≤"
    elif purpose in ['–ö–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∞–∫–æ–≤', 'A team for practitioners']:

        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                                 reply_markup=show_looking_for_keyboard(language, age))
        else:
            await message.answer('This feature is under development',
                                 reply_markup=show_looking_for_keyboard(language, age))
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ß–µ–ª–æ–≤–µ–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏"
    else:
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å?', reply_markup=show_who_search_keyboard(language))
        else:
            await message.answer('Who are you looking for?', reply_markup=show_who_search_keyboard(language))

        await state.set_state('edit_who_looking_for')


# –£–∑–Ω–∞–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state='edit_who_looking_for')
async def edit_profile_who_looking_for(message: types.Message, state: FSMContext):
    who_search = message.text
    await state.update_data(who_search=who_search)
    data = await state.get_data()
    language = data.get('language')
    user: models.User = data.get('user_')

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer('–ò–∑ –∫–∞–∫–æ–π —Ç—ã —Å—Ç—Ä–∞–Ω—ã?', reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text=user.country)
                ]
            ], resize_keyboard=True, one_time_keyboard=True
        ))
    else:
        await message.answer('What country are you from?', reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text=user.country)
                ]
            ], resize_keyboard=True, one_time_keyboard=True
        ))

    await state.set_state('edit_country')


# –£–∑–Ω–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state='edit_country')
async def edit_profile_country(message: types.Message, state: FSMContext):
    country = message.text
    data = await state.get_data()
    language = data.get('language')

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
    all_countries = await db.get_all_countries()

    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏ –∏–∑ –ë–î
    country_db = process.extractOne(country, all_countries)
    country_name, coincidence = country_db

    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ 100%
    if coincidence == 100:
        country = country_name[0]
        await state.update_data(country=country)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        all_regions = await db.get_all_regions(country)

        region_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

        for region in all_regions:
            region_btn = KeyboardButton(text=f'{region[0]}')
            region_keyboard.add(region_btn)

        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —Ä–µ–≥–∏–æ–Ω–∞? (–≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞)', reply_markup=region_keyboard)
        else:
            await message.answer('What region are you from? (choose from the list)', reply_markup=region_keyboard)

        await state.set_state('edit_region')

    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ 100%
    else:
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer(f'–í—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É <b>{country_name[0]}</b>?\n'
                                 f'–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: <b>{coincidence}%</b>',
                                 reply_markup=ReplyKeyboardMarkup(keyboard=[
                                     [
                                         KeyboardButton(text='‚úî'),
                                         KeyboardButton(text='‚ùå')
                                     ]
                                 ], resize_keyboard=True, one_time_keyboard=True
                                 ))

        else:
            await message.answer(f'Did you mean <b>{country_name[0]}</b>?\n'
                                 f'Coincidence: <b>{coincidence}%</b>',
                                 reply_markup=ReplyKeyboardMarkup(keyboard=[
                                     [
                                         KeyboardButton(text='‚úî'),
                                         KeyboardButton(text='‚ùå')
                                     ]
                                 ], resize_keyboard=True, one_time_keyboard=True
                                 ))

        await state.update_data(country=country_name[0])
        await state.set_state('check_edit_country')


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª —Å—Ç—Ä–∞–Ω—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —É—Ç–æ—á–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤ –±–∞–∑–µ
@dp.message_handler(state='check_edit_country')
async def check_country(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    language = data.get('language')
    country = data.get('country')

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É
    if answer == '‚úî':
        await state.update_data(country=country)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        all_regions = await db.get_all_regions(country)

        region_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

        for region in all_regions:
            region_btn = KeyboardButton(text=f'{region[0]}')
            region_keyboard.add(region_btn)

        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —Ä–µ–≥–∏–æ–Ω–∞? (–≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞)', reply_markup=region_keyboard)
        else:
            await message.answer('What region are you from? (choose from the list)', reply_markup=region_keyboard)

        await state.set_state('edit_region')

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É
    elif answer == '‚ùå':
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–ü—Ä–æ—Å—å–±–∞ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã')
        else:
            await message.answer('Please enter the correct country name again')

        await state.set_state('edit_country')

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç, –∞ –≤–≤–µ–ª –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç
    else:
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π —Å–∏–º–≤–æ–ª')
        else:
            await message.answer("I don't know such a symbol")


# –£–∑–Ω–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state='edit_region')
async def get_city(message: types.Message, state: FSMContext):
    region = message.text
    await state.update_data(region=region)
    data = await state.get_data()
    language = data.get('language')

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É
    all_cities = await db.get_all_cities(region)

    cities_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    for city in all_cities:
        city_btn = KeyboardButton(text=f'{city[0]}')
        cities_keyboard.add(city_btn)

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? (–≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞)', reply_markup=cities_keyboard)
    else:
        await message.answer('What city are you from? (choose from the list)', reply_markup=cities_keyboard)

    await state.set_state('edit_city')


# –£–∑–Ω–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state='edit_city')
async def edit_profile_city(message: types.Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    data = await state.get_data()
    language = data.get('language')
    user: models.User = data.get('user_')

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer('–ö–∞–∫ —Ç–≤–æ—ë –∏–º—è?', reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text=user.name)
                ]
            ], resize_keyboard=True
        ))
    else:
        await message.answer('What is your name?', reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text=user.name)
                ]
            ], resize_keyboard=True
        ))

    await state.set_state('edit_name')


# –£–∑–Ω–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.message_handler(state='edit_name')
async def edit_profile_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    data = await state.get_data()
    language = data.get('language')

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer('–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ.', reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                ]
            ], resize_keyboard=True
        ))
    else:
        await message.answer('Tell me about yourself.', reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='Skip')
                ]
            ], resize_keyboard=True
        ))

    await state.set_state('edit_about_yourself')


# –£–∑–Ω–∞–µ–º —Ö–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state='edit_about_yourself')
async def edit_profile_about_yourself(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user: models.User = data.get('user_')
    language = data.get('language')
    about_yourself = message.text
    if about_yourself != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' and about_yourself != 'Skip':
        await state.update_data(about_yourself=about_yourself)
    else:
        await state.update_data(about_yourself=user.about_yourself)

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer('–¢–≤–æ–∏ —Ö–æ–±–±–∏? –ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ ‚Äú–∑–∞–ø—è—Ç—É—é‚Äù —Ç–æ, —á–µ–º —Ç—ã –ª—é–±–∏—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è.',
                             reply_markup=ReplyKeyboardMarkup(
                                 keyboard=[
                                     [
                                         KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                                     ]
                                 ], resize_keyboard=True
                             ))
    else:
        await message.answer('Your hobbies? Write with a comma what you like to do.', reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='Skip')
                ]
            ], resize_keyboard=True
        ))

    await state.set_state('edit_hobby')


# –ü—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state='edit_hobby')
async def edit_profile_hobby(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user: models.User = data.get('user_')
    language = data.get('language')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
    try:
        hobby = message.text
        if len(hobby) > 50:
            raise NumberCharacters

    except NumberCharacters:
        hobby = message.text
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer(f'–•–æ–±–±–∏ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ = <b>50</b>,\n '
                                 f'–≤–∞—à–µ —Ö–æ–±–±–∏ –∏–º–µ–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ = <b>{len(hobby)}</b>!\n'
                                 f'–£–∫–∞–∂–∏—Ç–µ —Ö–æ–±–±–∏ –ø–æ–∫–æ—Ä–æ—á–µ.')
            return

        else:
            await message.answer(f'Hobby has a limit on the number of characters = <b>50</b>,\n '
                                 f'your hobby has a number of characters = <b>{len(hobby)}</b>!\n'
                                 f'Specify a shorter hobby.')
            return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if hobby != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' and hobby != 'Skip':
        await state.update_data(hobby=hobby)
    else:
        await state.update_data(hobby=user.hobby)

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer('–ü—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ (–Ω–µ —Ñ–∞–π–ª)', reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ')
                ]
            ], resize_keyboard=True
        ))
    else:
        await message.answer('Send your photo (not file)', reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='Leave the current')
                ]
            ], resize_keyboard=True
        ))

    await state.set_state('edit_photo')


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.message_handler(state='edit_photo')
async def edit_profile_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user: models.User = data.get('user_')
    if message.text not in ['–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ', 'Leave the current', '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', 'Go back']:
        photo = message.photo[-1]
        link = await photo_link(photo)
        await state.update_data(photo=link)
    else:
        link = user.photo
        await state.update_data(photo=link)

    language = data.get('language')
    age = data.get('age')
    gender = data.get('gender')
    purpose = data.get('purpose')
    who_search = data.get('who_search')
    country = data.get('country')
    city = data.get('city')
    name = data.get('name')
    about_yourself = data.get('about_yourself')
    hobby = data.get('hobby')
    game1 = data.get('game1')
    if game1 is None:
        game1 = user.game1
    game2 = data.get('game2')
    if game2 is None:
        game2 = user.game2

    if game1 is not None and game2 is not None:
        games = f'{game1}, {game2}'
    elif game2 is None:
        games = f'{game1}'
    elif game1 is None:
        games = f'{game2}'
    else:
        games = ''

    text_ru = f'–í–æ—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n' \
              f'–ò–º—è: <b>{name}</b>\n' \
              f'–í–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n' \
              f'–ü–æ–ª: <b>{gender}</b>\n' \
              f'–ò—â—É: <b>{purpose}</b>\n' \
              f'–ö–æ–≥–æ –∏—â—É: <b>{who_search}</b>\n' \
              f'–°—Ç—Ä–∞–Ω–∞: <b>{country}</b>\n' \
              f'–ì–æ—Ä–æ–¥: <b>{city}</b>\n' \
              f'–û —Å–µ–±–µ: <b>{about_yourself}</b>\n' \
              f'–•–æ–±–±–∏: <b>{hobby}</b>\n' \
              f'–í –∫–∞–∫–∏–µ –∏–≥—Ä—ã –∏–≥—Ä–∞—é: <b>{games}</b>\n' \
              f'–í—Å–µ –≤–µ—Ä–Ω–æ?'

    text_en = f'Here is your profile:\n\n' \
              f'Name: <b>{name}</b>\n' \
              f'Age: <b>{age}</b>\n' \
              f'Gender: <b>{gender}</b>\n' \
              f'Search: <b>{purpose}</b>\n' \
              f'Who search: <b>{who_search}</b>\n' \
              f'Country: <b>{country}</b>\n' \
              f'City: <b>{city}</b>\n' \
              f'About yourself: <b>{about_yourself}</b>\n' \
              f'Hobby: <b>{hobby}</b>\n' \
              f'Playing games: <b>{games}</b>\n' \
              f'Is that right?'

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer_photo(photo=link, caption=text_ru, reply_markup=show_correct_profile_keyboard(language))
    else:
        await message.answer_photo(photo=link, caption=text_en, reply_markup=show_correct_profile_keyboard(language))

    await state.set_state('edit_check_profile')


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(filters.Text(startswith=['–î–∞', 'Yes']), state='edit_check_profile')
async def edit_profile_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user: models.User = data.get('user_')
    language = data.get('language')
    age = data.get('age')
    gender = data.get('gender')
    purpose = data.get('purpose')
    who_search = data.get('who_search')
    country = data.get('country')
    city = data.get('city')
    name = data.get('name')
    about_yourself = data.get('about_yourself')
    hobby = data.get('hobby')
    game1 = data.get('game1')
    game2 = data.get('game2')
    photo = data.get('photo')

    await user.update(
        name=name,
        game1=game1,
        game2=game2,
        age=age,
        gender=gender,
        purpose=purpose,
        who_search=who_search,
        country=country,
        city=city,
        about_yourself=about_yourself,
        hobby=hobby,
        photo=str(photo)
    ).apply()

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /my_profile',
                             reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('Profile successfully added! To go to the main menu, press /my_profile',
                             reply_markup=ReplyKeyboardRemove())

    await state.reset_state()
