import time

from aiogram import types
from aiogram.dispatcher import FSMContext, filters
from aiogram.dispatcher.filters.builtin import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from keyboards.inline.gaming_keyboards import menu_my_profile_keyboard, action_for_profile
from loader import dp, bot, db
from utils.db_api import models
from utils.db_api.db_commands import FindUsers

find_query = FindUsers()

keywords_my_profile = ['–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', 'Edit profile', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'Main menu']


# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ú–æ—è –∞–Ω–∫–µ—Ç–∞"(/my_profile) –∏–ª–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@dp.message_handler(filters.Text(startswith=keywords_my_profile), state='*')
@dp.message_handler(Command(['my_profile']), state='*')
async def command_my_profile(message: types.Message, state: FSMContext):
    await state.reset_state()
    user_id = message.from_user.id
    user: models.User = await db.get_user(user_id)
    language = user.language
    await state.update_data(user_=user, language=language)
    game1 = user.game1
    game2 = user.game2

    if game1 is not None and game2 is not None:
        games = f'{game1}, {game2}'
    elif game2 is None:
        games = f'{game1}'
    elif game1 is None:
        games = f'{game2}'
    else:
        games = ''

    photo = user.photo
    purpose = user.purpose

    if purpose in ['–ü—Ä–æ—Å—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å', 'Just to play']:

        text_ru = f'–í–æ–∑—Ä–∞—Å—Ç: <b>{user.age}</b>\n' \
                  f'–ü–æ–ª: <b>{user.gender}</b>\n' \
                  f'–¶–µ–ª—å: <b>{user.purpose}</b>\n' \
                  f'–°—Ç—Ä–∞–Ω–∞ –ø–æ–∏—Å–∫–∞: <b>{user.country}</b>\n' \
                  f'–û —Å–µ–±–µ: <b>{user.about_yourself}</b>\n' \
                  f'–í –∫–∞–∫–∏–µ –∏–≥—Ä—ã –∏–≥—Ä–∞—é: <b>{games}</b>\n' \
                  f'–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: <b>{user.play_level}</b>\n' \
                  f'–í–∞—à –ö/–î: <b>{user.cool_down}</b>'

        text_en = f'Age: <b>{user.age}</b>\n' \
                  f'Gender: <b>{user.gender}</b>\n' \
                  f'Purpose: <b>{user.purpose}</b>\n' \
                  f'Country teammates: <b>{user.country}</b>\n' \
                  f'About yourself: <b>{user.about_yourself}</b>\n' \
                  f'Playing games: <b>{games}</b>\n' \
                  f'Level of play: <b>{user.play_level}</b>\n' \
                  f'Your cool down: <b>{user.cool_down}</b>'

        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:')

            if photo == 'None':
                await message.answer(text=text_ru)
            else:
                await message.answer_photo(photo=user.photo, caption=text_ru)

            await message.answer(text='1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ\n'
                                      '2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ\n'
                                      '3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã\n'
                                      '4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã', reply_markup=menu_my_profile_keyboard)
        else:
            await message.answer('Your profile:')

            if photo == 'None':
                await message.answer(text=text_en)
            else:
                await message.answer_photo(photo=user.photo, caption=text_en)

            await message.answer(text='1. Edit my profile\n'
                                      '2. Change my photo\n'
                                      '3. Change profile text\n'
                                      '4. View profiles', reply_markup=menu_my_profile_keyboard)

    else:
        text_ru = f'–ò–º—è: <b>{user.name}</b>\n' \
                  f'–í–æ–∑—Ä–∞—Å—Ç: <b>{user.age}</b>\n' \
                  f'–ü–æ–ª: <b>{user.gender}</b>\n' \
                  f'–ò—â—É: <b>{user.purpose}</b>\n' \
                  f'–ö–æ–≥–æ –∏—â—É: <b>{user.who_search}</b>\n' \
                  f'–°—Ç—Ä–∞–Ω–∞: <b>{user.country}</b>\n' \
                  f'–ì–æ—Ä–æ–¥: <b>{user.city}</b>\n' \
                  f'–û —Å–µ–±–µ: <b>{user.about_yourself}</b>\n' \
                  f'–•–æ–±–±–∏: <b>{user.hobby}</b>\n' \
                  f'–í –∫–∞–∫–∏–µ –∏–≥—Ä—ã –∏–≥—Ä–∞—é: <b>{games}</b>'

        text_en = f'Name: <b>{user.name}</b>\n' \
                  f'Age: <b>{user.age}</b>\n' \
                  f'Gender: <b>{user.gender}</b>\n' \
                  f'Search: <b>{user.purpose}</b>\n' \
                  f'Who search: <b>{user.who_search}</b>\n' \
                  f'Country: <b>{user.country}</b>\n' \
                  f'City: <b>{user.city}</b>\n' \
                  f'About yourself: <b>{user.about_yourself}</b>\n' \
                  f'Hobby: <b>{user.hobby}</b>\n' \
                  f'Playing games: <b>{games}</b>'

        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            await message.answer('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:')

            if photo == 'None':
                await message.answer(text=text_ru)
            else:
                await message.answer_photo(photo=user.photo, caption=text_ru)

            await message.answer(text='1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ\n'
                                      '2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ\n'
                                      '3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã\n'
                                      '4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã', reply_markup=menu_my_profile_keyboard)
        else:
            await message.answer('Your profile:')

            if photo == 'None':
                await message.answer(text=text_en)
            else:
                await message.answer_photo(photo=user.photo, caption=text_en)

            await message.answer(text='1. Edit my profile\n'
                                      '2. Change my photo\n'
                                      '3. Change profile text\n'
                                      '4. View profiles', reply_markup=menu_my_profile_keyboard)

    await state.set_state('my_profile_state')


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–¥—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—è
@dp.message_handler(state='my_profile_state')
async def edit_my_profile(message: types.Message, state: FSMContext):
    option = message.text
    data = await state.get_data()
    user: models.User = data.get('user_')
    language = data.get('language')
    purpose = user.purpose

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –†—É—Å—Å–∫–∏–π
    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç 1 "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"
        if option == '1':
            await message.answer('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?', reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text=str(user.age))
                    ]
                ], resize_keyboard=True
            ))

            await state.set_state('edit_age')

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç 2 "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"
        elif option == '2':
            await message.answer('–ü—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ (–Ω–µ —Ñ–∞–π–ª)', reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
                    ]
                ], resize_keyboard=True
            ))

            await state.set_state('edit_profile_photo')

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç 3 "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã"
        elif option == '3':
            await message.answer('–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ.', reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
                    ]
                ], resize_keyboard=True
            ))

            await state.set_state('edit_profile_description')

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç 4 "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"
        elif option == '4 üîé':
            msg = await message.answer(f'–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–Ω–∫–µ—Ç—ã üîç')
            symbol1 = 'üîé'
            symbol2 = 'üîç'
            i = 0
            while i != 7:
                msg = await bot.edit_message_text(text=f'–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–Ω–∫–µ—Ç—ã {symbol1}',
                                                  chat_id=message.from_user.id,
                                                  message_id=msg.message_id)

                time.sleep(.5)

                msg = await bot.edit_message_text(text=f'–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–Ω–∫–µ—Ç—ã {symbol2}',
                                                  chat_id=message.from_user.id,
                                                  message_id=msg.message_id)
                i += 1

            find_users = await find_query.find_user_to_purpose(message.from_user.id)
            count_profiles = len(find_users)

            try:
                first_profile: models.User = find_users[0]

                await state.update_data(profiles=find_users, count_profiles=count_profiles)

                game1 = first_profile.game1
                game2 = first_profile.game2

                if game1 is not None and game2 is not None:
                    games = f'{game1}, {game2}'
                elif game2 is None:
                    games = f'{game1}'
                elif game1 is None:
                    games = f'{game2}'
                else:
                    games = ''

                if count_profiles % 10 == 1:
                    await message.answer(f'–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω {count_profiles} –ø—Ä–æ—Ñ–∏–ª—å')
                elif 1 < count_profiles % 10 < 5:
                    await message.answer(f'–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ {count_profiles} –ø—Ä–æ—Ñ–∏–ª—è')
                else:
                    await message.answer(f'–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ {count_profiles} –ø—Ä–æ—Ñ–∏–ª–µ–π')

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å
                if purpose in ['–ü—Ä–æ—Å—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å', 'Just to play']:

                    text_just_play_ru = f'–í–æ–∑—Ä–∞—Å—Ç: <b>{first_profile.age}</b>\n' \
                                        f'–ü–æ–ª: <b>{first_profile.gender}</b>\n' \
                                        f'–¶–µ–ª—å: <b>{first_profile.purpose}</b>\n' \
                                        f'–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: <b>{first_profile.play_level}</b>\n' \
                                        f'–ö/–î: <b>{first_profile.cool_down}</b>\n' \
                                        f'–û —Å–µ–±–µ: <b>{first_profile.about_yourself}</b>\n' \
                                        f'–ò–≥—Ä–∞–µ—Ç –≤ –∏–≥—Ä—ã: <b>{games}</b>'

                    if first_profile.photo == 'None':
                        await message.answer(text=text_just_play_ru,
                                             reply_markup=action_for_profile(profiles=find_users,
                                                                             count_profiles=count_profiles,
                                                                             current_profile=0))
                    else:
                        await message.answer_photo(first_profile.photo,
                                                   caption=text_just_play_ru,
                                                   reply_markup=action_for_profile(profiles=find_users,
                                                                                   count_profiles=count_profiles,
                                                                                   current_profile=0))

                    await state.set_state('find_profiles_just_play')

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è
                elif purpose in ['–ß–µ–ª–æ–≤–µ–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏', 'A person in real life']:

                    text_real_life_ru = f'{first_profile.name}, {first_profile.age} –∏–∑ {first_profile.country}\n' \
                                        f'–•–æ–±–±–∏: <b>{first_profile.hobby}</b>\n' \
                                        f'–û —Å–µ–±–µ: <b>{first_profile.about_yourself}</b>\n' \
                                        f'–ò–≥—Ä–∞–µ—Ç –≤ –∏–≥—Ä—ã: <b>{games}</b>'

                    if first_profile.photo == 'None':
                        await message.answer(text=text_real_life_ru,
                                             reply_markup=action_for_profile(profiles=find_users,
                                                                             count_profiles=count_profiles,
                                                                             current_profile=0))
                    else:
                        await message.answer_photo(first_profile.photo,
                                                   caption=text_real_life_ru,
                                                   reply_markup=action_for_profile(profiles=find_users,
                                                                                   count_profiles=count_profiles,
                                                                                   current_profile=0))

                    await state.set_state('find_profiles')

                await state.update_data(profiles=find_users,
                                        count_profiles=count_profiles,
                                        current_profile_number=0)

            except IndexError:
                await message.answer('–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å –∞–Ω–∫–µ—Ç.\n\n'
                                     '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ–∑–¥–Ω–µ–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.')

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç 1 "Edit my profile"
        if option == '1':
            await message.answer('How old are you?', reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text=str(user.age))
                    ]
                ], resize_keyboard=True
            ))

            await state.set_state('edit_age')

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç 2 "Change my photo"
        elif option == '2':
            await message.answer('Send your photo (not file)', reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='Go back')
                    ]
                ], resize_keyboard=True
            ))

            await state.set_state('edit_profile_photo')

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç 3 "Change profile text"
        elif option == '3':
            await message.answer('Tell me about yourself.', reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='Go back')
                    ]
                ], resize_keyboard=True
            ))

            await state.set_state('edit_profile_description')

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç 4 "View profiles"
        elif option == '4 üîé':
            msg = await message.answer(f'Looking for suitable profiles üîç')
            symbol1 = 'üîé'
            symbol2 = 'üîç'
            i = 0
            while i != 7:
                msg = await bot.edit_message_text(text=f'Looking for suitable profiles {symbol1}',
                                                  chat_id=message.from_user.id,
                                                  message_id=msg.message_id)

                time.sleep(.5)

                msg = await bot.edit_message_text(text=f'Looking for suitable profiles {symbol2}',
                                                  chat_id=message.from_user.id,
                                                  message_id=msg.message_id)

                i += 1

            find_users = await find_query.find_user_to_purpose(message.from_user.id)
            count_profiles = len(find_users)

            try:
                first_profile: models.User = find_users[0]

                await state.update_data(profiles=find_users, count_profiles=count_profiles)

                game1 = first_profile.game1
                game2 = first_profile.game2

                if game1 is not None and game2 is not None:
                    games = f'{game1}, {game2}'
                elif game2 is None:
                    games = f'{game1}'
                elif game1 is None:
                    games = f'{game2}'
                else:
                    games = ''

                if count_profiles % 10 == 1:
                    await message.answer(f'For your query was found {count_profiles} profile(s)')
                elif 1 < count_profiles % 10 < 5:
                    await message.answer(f'For your query was found {count_profiles} profile(s)')
                else:
                    await message.answer(f'For your query was found {count_profiles} profile(s)')

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å
                if purpose in ['–ü—Ä–æ—Å—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å', 'Just to play']:

                    text_just_play_en = f'Age: <b>{first_profile.age}</b>\n' \
                                        f'Gender: <b>{first_profile.gender}</b>\n' \
                                        f'Purpose: <b>{first_profile.purpose}</b>\n' \
                                        f'Level of play: <b>{first_profile.play_level}</b>\n' \
                                        f'Cool down: <b>{first_profile.cool_down}</b>\n' \
                                        f'About: <b>{first_profile.about_yourself}</b>\n' \
                                        f'Games: <b>{games}</b>'

                    if first_profile.photo == 'None':
                        await message.answer(text=text_just_play_en,
                                             reply_markup=action_for_profile(profiles=find_users,
                                                                             count_profiles=count_profiles,
                                                                             current_profile=0))
                    else:
                        await message.answer_photo(first_profile.photo,
                                                   caption=text_just_play_en,
                                                   reply_markup=action_for_profile(profiles=find_users,
                                                                                   count_profiles=count_profiles,
                                                                                   current_profile=0))

                    await state.set_state('find_profiles_just_play')

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è
                elif purpose in ['–ß–µ–ª–æ–≤–µ–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏', 'A person in real life']:

                    text_real_life_en = f'{first_profile.name}, {first_profile.age} –∏–∑ {first_profile.country}\n' \
                                        f'Hobby: <b>{first_profile.hobby}</b>\n' \
                                        f'About: <b>{first_profile.about_yourself}</b>\n' \
                                        f'Games: <b>{games}</b>'

                    if first_profile.photo == 'None':
                        await message.answer(text=text_real_life_en,
                                             reply_markup=action_for_profile(profiles=find_users,
                                                                             count_profiles=count_profiles,
                                                                             current_profile=0))
                    else:
                        await message.answer_photo(first_profile.photo,
                                                   caption=text_real_life_en,
                                                   reply_markup=action_for_profile(profiles=find_users,
                                                                                   count_profiles=count_profiles,
                                                                                   current_profile=0))

                    await state.set_state('find_profiles')

                await state.update_data(profiles=find_users,
                                        count_profiles=count_profiles,
                                        current_profile_number=0)

            except IndexError:
                await message.answer('There were no questionnaires according to your search criteria.\n\n'
                                     'Try searching later or change the search criteria.')
