from aiogram import types
from aiogram.dispatcher import FSMContext, filters
from aiogram.types import ReplyKeyboardRemove

from keyboards.inline.gaming_keyboards import show_games_keyboard
from loader import dp


# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º, –∫–æ–≥–¥–∞ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∏–≥—Ä–∞–µ—Ç
@dp.message_handler(state='choice_games')
async def choice_games(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    text_ru = '–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É (–∏–≥—Ä—ã), –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ! –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –æ–¥–Ω—É –∏–≥—Ä—É, –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É.'
    text_en = 'Choose the game(s) you are playing! After clicking on one game, you will be able to add another one.'

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer(text=text_ru, reply_markup=show_games_keyboard(language))
    else:
        await message.answer(text=text_en, reply_markup=show_games_keyboard(language))

    await state.set_state('choice_games_more')


# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É "PUBG MOBILE"
@dp.message_handler(text='PUBG MOBILE', state='choice_games_more')
async def choice_games1(message: types.Message, state: FSMContext):
    game1 = message.text
    data = await state.get_data()
    language = data.get('language')
    game2 = data.get('game2')
    await state.update_data(game1=game1)

    if game2 is None:
        text_ru = f'–í—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ –∏–≥—Ä—É <b>{game1}</b>, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–∫—É—é-—Ç–æ –∏–≥—Ä—É –∏–ª–∏ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å ' \
                  f'–ª—é–¥–µ–π —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ?'
        text_en = f'You are playing the <b>{game1}</b>, do you want to add another game or will we look for people ' \
                  f'only in this game?'
    else:
        text_ru = f'–í—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ –∏–≥—Ä—ã <b>{game1}, {game2}</b>, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"'
        text_en = f'You are playing games <b>{game1}, {game2}</b>, click "Continue"'

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer(text=text_ru, reply_markup=show_games_keyboard(language, game1, game2))
    else:
        await message.answer(text=text_en, reply_markup=show_games_keyboard(language, game1, game2))


# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É "PUBG New State"
@dp.message_handler(text='PUBG New State', state='choice_games_more')
async def choice_games2(message: types.Message, state: FSMContext):
    game2 = message.text
    data = await state.get_data()
    language = data.get('language')
    game1 = data.get('game1')
    await state.update_data(game2=game2)

    if game1 is None:
        text_ru = f'–í—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ –∏–≥—Ä—É <b>{game2}</b>, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–∫—É—é-—Ç–æ –∏–≥—Ä—É –∏–ª–∏ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å ' \
                  f'–ª—é–¥–µ–π —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ?'
        text_en = f'You are playing the <b>{game2}</b>, do you want to add another game or will we look for people ' \
                  f'only in this game?'
    else:
        text_ru = f'–í—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ –∏–≥—Ä—ã <b>{game1}, {game2}</b>, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"'
        text_en = f'You are playing games <b>{game1}, {game2}</b>, click "Continue"'

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer(text=text_ru, reply_markup=show_games_keyboard(language, game2, game1))
    else:
        await message.answer(text=text_en, reply_markup=show_games_keyboard(language, game2, game1))


# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å". –£–∑–Ω–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(filters.Text(startswith=['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'Continue'], ignore_case=True), state='choice_games_more')
async def enter_age(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    text_ru = '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?'
    text_en = 'How old are you?'

    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        await message.answer(text=text_ru, reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer(text=text_en, reply_markup=ReplyKeyboardRemove())

    await state.set_state('age')
